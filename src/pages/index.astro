---
import Layout from "@layouts/Layout.astro";
import SkipLink from "@utils/SkipLink.astro";
// import { data } from "~/fake.json";
import Workshops from "@components/Workshops.astro";
import { cn } from "~/lib";
import type { Workshop } from "~/lib";
import { getFormattedDates } from "~/lib";
import Navigation from "@utils/Navigation.astro";
import Hero from "@components/Hero.astro";
import Footer from "~/components/Footer.astro";

const res = await fetch(
  "https://script.googleusercontent.com/macros/echo?user_content_key=0MsFed7ZIug5VQ4rgEjm4JHFpyFFbEgPEijcDGPzylNz_23huVUqfARB4iDQ8r6_FYBCkqfXkOTrWY_7F5Nauk2ee-q2HaZ0m5_BxDlH2jW0nuo2oDemN9CCS2h10ox_1xSncGQajx_ryfhECjZEnNkug743QoVrUSwdfm4U_2RAVTqZdKfWqTLdNugdvPyulcVQL2FK0Elv0shRWv0RfAJp27BVirWAYn7jyVNbbCFL6ZS5Y-HecA&lib=M22tqyZQve7LsC61Wvqq5mL0EK-iT8Fdm"
);
const {
  data,
}: {
  data: Record<
    string,
    {
      times: Array<[string, string | Array<Workshop>]>;
    }
  >;
} = await res.json();

const startDate = "28-12-2024";
const endDate = "05-01-2025";
const formattedDates = getFormattedDates(startDate, endDate);
---

<Layout title="NYNT Schedule 24/25">
  <SkipLink />
  <div class="sr-only" id="start"></div>
  <Hero />
  <main id="main">
    {
      formattedDates.map((date) => {
        const day = date.split("/")[0];
        const schedule = data[day];
        return (
          <section class="schedule" id={day}>
            <h2 class="schedule-heading">{date}</h2>
            <div class="schedule-content">
              {schedule.times.map(([time, label]) => {
                const isWorkshop = typeof label !== "string";

                if (isWorkshop) {
                  return (
                    <>
                      <p class="workshop-time">{time.split("-").join(" - ")}</p>
                      <Workshops data={label} />
                    </>
                  );
                }

                return (
                  <div
                    class={cn(
                      "round",
                      (label.includes("Talent") ||
                        label.includes("New Year")) &&
                        "accent",
                      (label.includes("Lunch") || label.includes("Dinner")) &&
                        "meal"
                    )}
                  >
                    <p class="time">{time.split("-").join(" - ")}</p>
                    <p class="label">{label}</p>
                  </div>
                );
              })}
            </div>
          </section>
        );
      })
    }
  </main>
  <Footer />
  <section aria-label="Utilities">
    <!-- You could also add a theme switch here or anything considered a utility -->
    <!-- <BackToTop /> -->

    <Navigation />
  </section>
</Layout>

<style>
  :root {
    --time-width: 100px;
  }

  .schedule {
    padding: var(--space-l) var(--space-xs);
  }

  .schedule-heading {
    font-family: "Bricolage Grotesque Variable";
    font-style: normal;
    font-weight: 800;
    font-size: 24px;
    text-align: center;
    color: var(--color-red-900);
  }

  .schedule-content {
    display: flex;
    flex-direction: column;
    gap: var(--space-4xs);
    margin-top: var(--space-s);
  }

  .workshop-time,
  .time {
    color: var(--color-neutral-dark);
    font-family: var(--fira);
    font-weight: 600;
    font-size: 13px;
  }

  .workshop-time {
    padding: 6px 10px;
    padding-bottom: 0;
  }

  .round {
    display: flex;
    flex-direction: column;
    align-items: baseline;

    padding: 6px 10px;
    border-radius: var(--border-radius);
    background: var(--color-neutral-light);

    .label {
      font-size: 15px;
      font-weight: 500;
      font-family: var(--fira);
    }

    &:has(.workshops) {
      background: var(--color-white);
      padding: 0 var(--space-s);
    }
  }

  .meal {
    background: var(--color-red-100);
  }

  .accent {
    background: var(--color-orange);
    .label {
      position: relative;
      &::before {
        content: url("/firework.svg");
        position: absolute;
        top: 50%;
        transform: translateY(-48%);
        right: calc(100% - 52px);
      }
      &:after {
        content: url("/stars.svg");
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        left: calc(100% + var(--space-4xs));
        width: 24px;
        height: 24px;
      }
    }
  }
</style>

<script is:inline>
  window.addEventListener("DOMContentLoaded", () => {
    const today = new Date();
    let dayOfMonth = today.getDate();
    if (dayOfMonth < 6 || dayOfMonth > 27) {
      document
        .getElementById(String(dayOfMonth).padStart(2, "0"))
        .scrollIntoView({
          behavior: "smooth",
        });
    }

    const menuElements = document.querySelectorAll(".nav-day");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.getAttribute("id");
          const menuElement = document.getElementById(`menu-${id}`);
          console.log(entry);
          if (entry.isIntersecting) {
            menuElements.forEach((menuElement) => {
              menuElement.classList.remove("active");
            });
            menuElement.classList.add("active");
            menuElement.scrollIntoView({
              behavior: "smooth",
            });
          } else {
            menuElement.classList.remove("active");
          }
        });
      },
      { threshold: [0.2, 1] }
    );

    // Track all sections that have an `id` applied
    document.querySelectorAll("section.schedule").forEach((section) => {
      observer.observe(section);
    });
  });
</script>
